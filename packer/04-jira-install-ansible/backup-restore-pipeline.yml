image:
  name: registry.dx1.lseg.com/app/app-51310/azure/prdsvc/terraform/azure-prdsvc-terraform-pipelines/azurecli-terraform-git:latest


before_script:
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}".insteadOf "https://${CI_SERVER_HOST}"

include:
  - project: ci/stable/security/vault/vault-integrator
    ref: 4.1.1
    file:
      - "templates/vault-integrator.yml"  

variables:
  LMP_ASSET_ID: "app-51341"
  SOURCE_ENVIRONMENT:
    value: "prd"
    options: ["qa", "ppr", "ppr2", "ppr3", "ppr5", "ppr6", "ppr7", "prd", "dr"]
    description: "Select your environment"

  REFRESH_ACTION:
    value: "backup"
    options: ["backup", "restore"]
    description: "Select your environment refresh action to be taken"

  applicationName:
    value: "jira"
    description: "The name of the application"


workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never
    - if: '$SOURCE_ENVIRONMENT == "qa"'
      variables:
        RUNNER_TAG: "atlappstest"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-dev-sub-atlapptest-02"
        instanceNumber: "1"
    - if: '$SOURCE_ENVIRONMENT == "ppr"'
      variables:
        RUNNER_TAG: "atlappsppr"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-ppr-staging-sub-atlapps-01"
        instanceNumber: "1"
    - if: '$SOURCE_ENVIRONMENT == "ppr2"'
      variables:
        RUNNER_TAG: "atlappsppr"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-ppr-staging-sub-atlapps-01"
        instanceNumber: "2"
    - if: '$SOURCE_ENVIRONMENT == "ppr3"'
      variables:
        RUNNER_TAG: "atlappsppr"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-ppr-staging-sub-atlapps-01"
        instanceNumber: "3"
    - if: '$SOURCE_ENVIRONMENT == "ppr5"'
      variables:
        RUNNER_TAG: "atlappsppr"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-ppr-staging-sub-atlapps-01"
        instanceNumber: "5"
    - if: '$SOURCE_ENVIRONMENT == "ppr6"'
      variables:
        RUNNER_TAG: "atlappsppr"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-ppr-staging-sub-atlapps-01"
        instanceNumber: "6"
    - if: '$SOURCE_ENVIRONMENT == "ppr7"'
      variables:
        RUNNER_TAG: "atlappsppr"
        LSEG_PPE_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-ppr-staging-sub-atlapps-01"
        instanceNumber: "7"
    - if: "$SOURCE_ENVIRONMENT == 'prd' || $SOURCE_ENVIRONMENT == 'dr'"
      variables:
        RUNNER_TAG: "atlappsprd"
        LSEG_PROD_VAULT: "true"
        AZURE_ACCOUNT: "a1a-51337-prd-sub-atlapps-01"
        instanceNumber: "1"
    - when: always

default:
  tags: [$RUNNER_TAG]

stages:
    - azure-auth-lmp
    - backup-data
    - restore-data
01-azure-dynamic-secrets:
  stage: azure-auth-lmp
  tags:
    - LSEG
  extends: [.vault-artifact-decrypter, .vault-azure-auth]
  #when: manual

02-BackupData:
  rules:
    - if: $REFRESH_ACTION == "backup"
      when: always
    - when: never
  stage: backup-data

  script:
    - echo "Logging in and setting variables"
    - az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
    - az account set --subscription $ARM_SUBSCRIPTION_ID
    - export client_secret="$ARM_CLIENT_SECRET"
    - export client_id="$ARM_CLIENT_ID"
    - export tenant_id="$ARM_TENANT_ID"
    - export subscription_id="$ARM_SUBSCRIPTION_ID" 
    - echo "Finding resource names and running VMSS command"
    - Resourcegroupname=$(az group list --tag mnd-applicationname="refinitiv_enterprise_${applicationName}_on_azure" --output json | jq -r '.[] | .name')
    - echo "Resource Group Name $Resourcegroupname"
    - vmssName=$(az vmss list --resource-group $Resourcegroupname | jq --arg app_reference_number "$instanceNumber" -r '.[] | select (.name | contains("-"+$app_reference_number)) | .name')
    - vmssInstanceId=$(az vmss list-instances --resource-group $Resourcegroupname --name $vmssName --output json | jq -r '.[0] | .instanceId')
    - echo "az vmss run-command invoke -g $Resourcegroupname -n $vmssName --instance-id $vmssInstanceId --command-id RunShellScript --scripts /elasity-${applicationName}/scripts/utils/pg_dump_to_share.sh"
    - az vmss run-command invoke -g $Resourcegroupname -n $vmssName --instance-id $vmssInstanceId --command-id RunShellScript --scripts "/elasity-${applicationName}/scripts/utils/pg_dump_to_share.sh"
    - echo "Initiating new backup"
    - RecoveryServiceVault=$(az backup vault list --resource-group "$Resourcegroupname" --output json | jq --arg app_reference_number "$instanceNumber" -r '.[] | select (.name | contains("-"+$app_reference_number)) | .name')
    - echo "Recovery Service Vault $RecoveryServiceVault" 
    - RecoveryPointContainer=$(az backup container list --vault-name $RecoveryServiceVault --resource-group $Resourcegroupname --backup-management-type azurestorage --output json | jq -r '.[] | .properties.friendlyName')
    - echo $RecoveryPointContainer
    - sourceFileShare=$(az backup item list --resource-group $Resourcegroupname --vault-name $RecoveryServiceVault --backup-management-type "AzureStorage" --container-name $RecoveryPointContainer  | jq --arg app_reference_number "$instanceNumber" -r 'first(.[] | select (.properties.friendlyName | contains("-"+$app_reference_number))) | .properties.friendlyName')
    - BackupRetentionDate=$(date -d '+30 days' '+%d-%m-%Y')
    - echo "Backing up share $sourceFileShare in Container $RecoveryPointContainer from Vault $RecoveryServiceVault in Group $Resourcegroupname"
    - echo "az backup protection backup-now --backup-management-type 'AzureStorage' --vault-name $RecoveryServiceVault --resource-group $Resourcegroupname --container-name $RecoveryPointContainer --item-name $sourceFileShare --retain-until $BackupRetentionDate --output json | jq -r '.name'"
    - BackupStatusId=$(az backup protection backup-now --backup-management-type "AzureStorage" --vault-name $RecoveryServiceVault --resource-group $Resourcegroupname --container-name $RecoveryPointContainer --item-name $sourceFileShare --retain-until $BackupRetentionDate --output json | jq -r '.name')
    - echo $BackupStatusId
    - while true; 
         do BackupStatus=$(az backup job list --resource-group $Resourcegroupname --vault-name $RecoveryServiceVault --query '[?name==`'$BackupStatusId'`]' | jq -r '.[] | .properties.status');
         if [ $BackupStatus == "Completed" ]; 
             then 
             echo "Backup $BackupStatus";
             break;
         else
             echo "Backup is still $BackupStatus will check again in 10 seconds";
             sleep 10;
         fi
     done
    
    #- LatestRecoveryPoint=$(az backup recoverypoint list --vault-name $RecoveryServiceVault --resource-group $Resourcegroupname --container-name $RecoveryPointContainer --backup-management-type azurestorage --item-name $sourceFileShare --workload-type azurefileshare --output json | jq -r '. |= sort_by(.properties.recoveryPointTime)[-1] | .name')
    #- echo "Latest Recovery Point" + $LatestRecoveryPoint 
    #- az backup restore restore-azurefileshare --vault-name $RecoveryServiceVault --resource-group $Resourcegroupname --rp-name $LatestRecoveryPoint --container-name $RecoveryPointContainer --item-name $sourceFileShare --restore-mode alternatelocation --target-resource-group-name $targetResourceGroup --target-storage-account $targetStorage --target-file-share $targetFileShare --target-folder "fisheye-restored" --resolve-conflict Skip
  needs: [01-azure-dynamic-secrets]
  extends: [.vault-artifact-decrypter, .vault-azure-auth]
  dependencies: [01-azure-dynamic-secrets]
  tags:
    - "$RUNNER_TAG"

03-RestoreData:
  rules:
    - if: $REFRESH_ACTION == "restore" && $SOURCE_ENVIRONMENT != "prd"
      when: always
    - when: never
  stage: restore-data

  script:
    - az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
    - az account set --subscription $ARM_SUBSCRIPTION_ID
    - export client_secret="$ARM_CLIENT_SECRET"
    - export client_id="$ARM_CLIENT_ID"
    - export tenant_id="$ARM_TENANT_ID"
    - export subscription_id="$ARM_SUBSCRIPTION_ID" 
    - echo "Find Resource Group"
    - Resourcegroupname=$(az group list --tag mnd-applicationname="refinitiv_enterprise_${applicationName}_on_azure" --output json | jq --arg app_reference_number "$instanceNumber" -r '.[] | select (.name | contains("-0"+$app_reference_number)) | .name')
    - echo "Resource Group Name $Resourcegroupname"

    - vmssName=$(az vmss list --resource-group $Resourcegroupname | jq --arg app_reference_number "$instanceNumber" -r '.[] | select (.name | contains("-"+$app_reference_number)) | .name')
    - vmssInstanceId=$(az vmss list-instances --resource-group $Resourcegroupname --name $vmssName --output json | jq -r '.[0] | .instanceId')
    - echo "az vmss run-command invoke -g $Resourcegroupname -n $vmssName --instance-id $vmssInstanceId --command-id RunShellScript --scripts /elasity-${applicationName}/scripts/utils/pg_restore_from_share.sh"
    - az vmss run-command invoke -g $Resourcegroupname -n $vmssName --instance-id $vmssInstanceId --command-id RunShellScript --scripts "/elasity-${applicationName}/scripts/utils/pg_restore_from_share.sh"

  needs: [01-azure-dynamic-secrets]
  extends: [.vault-artifact-decrypter, .vault-azure-auth]
  dependencies: [01-azure-dynamic-secrets]
  tags:
    - "$RUNNER_TAG"
